// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/kjkondratuk/gh-workflow-monitor/pkg/github"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetFailedWorkflows provides a mock function with given fields: ctx, prNumber, repo
func (_m *MockClient) GetFailedWorkflows(ctx context.Context, prNumber string, repo string) error {
	ret := _m.Called(ctx, prNumber, repo)

	if len(ret) == 0 {
		panic("no return value specified for GetFailedWorkflows")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, prNumber, repo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_GetFailedWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFailedWorkflows'
type MockClient_GetFailedWorkflows_Call struct {
	*mock.Call
}

// GetFailedWorkflows is a helper method to define mock.On call
//   - ctx context.Context
//   - prNumber string
//   - repo string
func (_e *MockClient_Expecter) GetFailedWorkflows(ctx interface{}, prNumber interface{}, repo interface{}) *MockClient_GetFailedWorkflows_Call {
	return &MockClient_GetFailedWorkflows_Call{Call: _e.mock.On("GetFailedWorkflows", ctx, prNumber, repo)}
}

func (_c *MockClient_GetFailedWorkflows_Call) Run(run func(ctx context.Context, prNumber string, repo string)) *MockClient_GetFailedWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetFailedWorkflows_Call) Return(_a0 error) *MockClient_GetFailedWorkflows_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetFailedWorkflows_Call) RunAndReturn(run func(context.Context, string, string) error) *MockClient_GetFailedWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllFailedWorkflows provides a mock function with given fields: ctx, days
func (_m *MockClient) ListAllFailedWorkflows(ctx context.Context, days int) (map[string][]github.WorkflowFailure, error) {
	ret := _m.Called(ctx, days)

	if len(ret) == 0 {
		panic("no return value specified for ListAllFailedWorkflows")
	}

	var r0 map[string][]github.WorkflowFailure
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (map[string][]github.WorkflowFailure, error)); ok {
		return rf(ctx, days)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) map[string][]github.WorkflowFailure); ok {
		r0 = rf(ctx, days)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]github.WorkflowFailure)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, days)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ListAllFailedWorkflows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllFailedWorkflows'
type MockClient_ListAllFailedWorkflows_Call struct {
	*mock.Call
}

// ListAllFailedWorkflows is a helper method to define mock.On call
//   - ctx context.Context
//   - days int
func (_e *MockClient_Expecter) ListAllFailedWorkflows(ctx interface{}, days interface{}) *MockClient_ListAllFailedWorkflows_Call {
	return &MockClient_ListAllFailedWorkflows_Call{Call: _e.mock.On("ListAllFailedWorkflows", ctx, days)}
}

func (_c *MockClient_ListAllFailedWorkflows_Call) Run(run func(ctx context.Context, days int)) *MockClient_ListAllFailedWorkflows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_ListAllFailedWorkflows_Call) Return(_a0 map[string][]github.WorkflowFailure, _a1 error) *MockClient_ListAllFailedWorkflows_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ListAllFailedWorkflows_Call) RunAndReturn(run func(context.Context, int) (map[string][]github.WorkflowFailure, error)) *MockClient_ListAllFailedWorkflows_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
